<?php
/**
 * @file
 */

/**
 * Impelments hook_init().
 */
function google_drive_sync_init() {
  if (isset($_SESSION['google_drive_sync']) && $_SESSION['google_drive_sync'] === FALSE) {
    drupal_set_message(t('You couldn\'t authenticate yourself with your credentials at Google. Please request for new credentials !link!', array(
      '!link' => google_drive_sync_get_authentication_link(t('on this link')),
    )));
  }
}

/**
 * Implements hook_permission().
 */
function google_drive_sync_permission() {
  $permissions = array(
    'administer googledrive' => array(
      'title' => t('Administer Google Drive settings'),
    ),
    'view googledrive preview' => array(
      'title' => t('View Document\'s preview'),
    ),
    'sync googledrive documents' => array(
      'title' => t('Synchronize own Google Drive documents'),
    ),
  );

  return $permissions;
}

/**
 * Implements hook_theme().
 */
function google_drive_sync_theme() {
  return array(
    'google_drive_sync_preview' => array(
      'variables' => array(
        'link' => '',
        'width' => 600,
        'height' => 800,
      ),
      'template' => 'google-drive-sync-preview',
    ),
  );
}

/**
 * Implements hook_menu().
 */
function google_drive_sync_menu() {
  $items = array();

  $items['goauth/authenticate'] = array(
    'title' => 'Google Drive OAuth login',
    'page callback' => 'google_drive_sync_authenticate_page',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
    'file' => 'google_drive_sync.pages.inc',
  );

  $items['admin/config/people/googledrive'] = array(
    'title' => 'Google Drive authentication settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('google_drive_sync_admin_auth_form'),
    'file' => 'google_drive_sync.pages.inc',
    'access arguments' => array('administer googledrive'),
  );

  $items['googledrive/sync-all'] = array(
    'title' => 'Google Drive Sync',
    'page callback' => 'google_drive_sync_synchronization_page',
    'access arguments' => array('administer googledrive'),
    'type' => MENU_CALLBACK,
    'file' => 'google_drive_sync.pages.inc',
  );

  $items['googledrive/sync/%user'] = array(
    'title' => 'Google Drive Sync',
    'page callback' => 'google_drive_sync_synchronization_page',
    'page arguments' => array(2),
    'access arguments' => array('sync googledrive documents'),
    'type' => MENU_CALLBACK,
    'file' => 'google_drive_sync.pages.inc',
  );

  return $items;
}

/**
 * Implements hook_user_load().
 */
function google_drive_sync_user_load($users) {
  $result = google_drive_sync_get_users_credential();

  foreach ($result as $uid => $record) {
    $users[$uid]->googledrive = $record;
  }
}

/**
 * Implements hook_user_insert().
 */
function google_drive_sync_user_insert(&$edit, $account, $category) {
  if (!empty($account->googledrive)) {
    $data = $account->googledrive;
    $data['uid'] = $account->uid;
    db_insert('google_oauth')
      ->fields(_google_drive_sync_prepare_db_data($data))
      ->execute();
  }
}

/**
 * Implements hook_user_update().
 */
function google_drive_sync_user_update(&$edit, $account, $category) {
  if (empty($account->googledrive)) {
    db_delete('google_oauth')
      ->condition('uid', $account->uid)
      ->execute();
  }
else {
  $data = $account->googledrive;
  unset($data['uid']);

  db_merge('google_oauth')
      ->key(array(
        'uid' => $account->uid,
   ))
      ->fields(_google_drive_sync_prepare_db_data($data))
      ->execute();
}
}

/**
 * Implements hook_block_info().
 */
function google_drive_sync_block_info() {
  $blocks = array();

  $blocks['gdrive_login'] = array(
    'info' => t('Google Drive Login'),
    'cache' => DRUPAL_CACHE_PER_USER,
  );

  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function google_drive_sync_block_view() {
  global $user;

  $account = user_load($user->uid);

  $content = array(
    'subject' => '',
    'content' => '',
  );

  if ($account->uid ? empty($account->googledrive) : TRUE) {
    $content['subject'] = t('Google Drive');
    $content['content'] = google_drive_sync_get_authentication_link();
  }

  return $content;
}

/**
 * Implements hook_libraries_info().
 */
function google_drive_sync_libraries_info() {
  $libraries = array();

  $libraries['google-api-php-client'] = array(
    'name' => 'Google API PHP Client',
    'vendor url' => 'https://code.google.com/p/google-api-php-client/',
    'download url' => 'https://code.google.com/p/google-api-php-client/downloads/detail?name=google-api-php-client-0.6.0.tar.gz&can=2&q=',
    'path' => 'src',
    'version callback' => 'googledrive_clientsdk_get_version',
    'files' => array(
      'php' => array(
        'auth/Google_AssertionCredentials.php',
        'auth/Google_Auth.php',
        'auth/Google_AuthNone.php',
        'auth/Google_LoginTicket.php',
        'auth/Google_OAuth2.php',
        'auth/Google_P12Signer.php',
        'auth/Google_PemVerifier.php',
        'auth/Google_Signer.php',
        'auth/Google_Verifier.php',
        'cache/Google_ApcCache.php',
        'cache/Google_Cache.php',
        'cache/Google_FileCache.php',
        'cache/Google_MemcacheCache.php',
        'config.php',
        'contrib/Google_AdexchangebuyerService.php',
        'contrib/Google_AdsensehostService.php',
        'contrib/Google_AdsenseService.php',
        'contrib/Google_AnalyticsService.php',
        'contrib/Google_BigqueryService.php',
        'contrib/Google_BloggerService.php',
        'contrib/Google_BooksService.php',
        'contrib/Google_CalendarService.php',
        'contrib/Google_ComputeService.php',
        'contrib/Google_CustomsearchService.php',
        'contrib/Google_DriveService.php',
        'contrib/Google_FreebaseService.php',
        'contrib/Google_FusiontablesService.php',
        'contrib/Google_GanService.php',
        'contrib/Google_LatitudeService.php',
        'contrib/Google_LicensingService.php',
        'contrib/Google_ModeratorService.php',
        'contrib/Google_Oauth2Service.php',
        'contrib/Google_OrkutService.php',
        'contrib/Google_PagespeedonlineService.php',
        'contrib/Google_PlusMomentsService.php',
        'contrib/Google_PlusService.php',
        'contrib/Google_PredictionService.php',
        'contrib/Google_ShoppingService.php',
        'contrib/Google_SiteVerificationService.php',
        'contrib/Google_StorageService.php',
        'contrib/Google_TaskqueueService.php',
        'contrib/Google_TasksService.php',
        'contrib/Google_TranslateService.php',
        'contrib/Google_UrlshortenerService.php',
        'contrib/Google_WebfontsService.php',
        'contrib/Google_YoutubeService.php',
        'external/URITemplateParser.php',
        'Google_Client.php',
        'io/Google_CacheParser.php',
        'io/Google_CurlIO.php',
        'io/Google_HttpRequest.php',
        'io/Google_IO.php',
        'io/Google_REST.php',
        'service/Google_BatchRequest.php',
        'service/Google_MediaFileUpload.php',
        'service/Google_Model.php',
        'service/Google_Service.php',
        'service/Google_ServiceResource.php',
        'service/Google_Utils.php',
      ),
    ),
  );

  return $libraries;
}

/**
 * Implements hook_field_extra_fields.
 */
function google_drive_sync_field_extra_fields() {
  $extra['node']['cloud_asset'] = array(
    'display' => array(
      'google_preview' => array(
        'label' => t('Document\'s preview'),
        'description' => t('Document\'s preview'),
        'weight' => 0,
      ),
    ),
  );

  $extra['user']['user'] = array(
    'display' => array(
      'google_sync' => array(
        'label' => t('Sync button'),
        'description' => t('Button to start to synchronize the user\'s documents manually.'),
        'weight' => 0,
      ),
    ),
  );

  return $extra;
}

/**
 * Implement hook_node_view().
 *
 * Add a preview of the document to node page.
 */
function google_drive_sync_node_view($node, $view_mode) {
  if ($node->type == 'cloud_asset' && $view_mode == 'full' && user_access('view googledrive preview')) {
    $file_id = field_get_items('node', $node, 'field_file_id');
    $file_id = isset($file_id[0]['value']) ? $file_id[0]['value'] : 0;

    if ($file_id) {
      $credentials = google_drive_sync_get_users_credential($node->uid);
      $credentials = reset($credentials);
      $file = google_drive_sync_get_file($credentials, $file_id);

      if (isset($file) && $file->embedLink) {
        $node->content['google_preview'] = array(
          '#theme' => 'google_drive_sync_preview',
          '#link' => $file->embedLink,
        );
      }
    }
  }
}

/**
 * Implements hook_user_login().
 *
 * Check if the logging in user can connect to Google via Oauth on each login.
 */
function google_drive_sync_user_login(&$edit, $account) {
  if (isset($account->googledrive)) {
    $credentials = $account->googledrive;
    $handler = new GoogleDriveServiceHandler(
      variable_get('googledrive_client_id'),
      variable_get('googledrive_client_secret'),
      variable_get('googledrive_redirect_uri')
    );

    $user_info = $handler->GetUserInfo($credentials);

    if (!empty($user_info)) {
      cache_set("googledrive:userinfo:{$credentials['uid']}", $user_info, 'cache', time() + $credentials['expires_in']);
      $_SESSION['google_drive_sync'] = TRUE;
    }
    else {
      $_SESSION['google_drive_sync'] = FALSE;
    }
  }
}

/**
 * Implement hook_user_view().
 *
 * Add a link of the document to node page.
 */
function google_drive_sync_user_view($account, $view_mode) {
  global $user;

  if (isset($account->googledrive) && $view_mode == 'full' && ($user->uid == $account->uid) &&
  user_access('sync googledrive documents')) {
    $account->content['google_sync'] = array(
      '#theme' => 'link',
      '#path' => "googledrive/sync/{$account->uid}",
      '#text' => t('Sync Google Documents'),
      '#options' => array(
        'attributes' => array(),
        'html' => FALSE,
      ),
    );
  }
}

/**
 * Implements hook_cron_queue_info().
 */
function google_drive_sync_cron_queue_info() {
  $queues['google_drive_sync'] = array(
    'worker callback' => 'google_drive_sync_callback',
    'time' => 60,
  );
  return $queues;
}

/**
 * Implements hook_cron().
 */
function google_drive_sync_cron() {
  if (variable_get('googledrive_auto_sync')) {
    // Get all users' creadential.
    $users_credentials = google_drive_sync_get_users_credential();
    $queue = DrupalQueue::get('google_drive_sync');
    foreach ($users_credentials as $credentials) {
      $queue->createItem($credentials);
    }
  }
}

/**
 * Synchronize a user's documents.
 *
 * @param $credentials
 *   User's google credentials.
 */
function google_drive_sync_callback($credentials) {
  $handler = new GoogleDriveServiceHandler(
    variable_get('googledrive_client_id'),
    variable_get('googledrive_client_secret'),
    variable_get('googledrive_redirect_uri')
  );

  $user_info = google_drive_sync_get_userinfo($handler, $credentials);

  $timestamp = google_drive_sync_get_last_sync($credentials['uid']);
  $date = new DateTime();
  $date->setTimezone(new DateTimeZone('UTC'));

  if ($timestamp) {
    $date->setTimestamp($timestamp);
    $sync_last = $date->format(DateTime::RFC3339);
  }
  else {
    $date = $date->createFromFormat('d/m/Y', '01/01/1970');
    $sync_last = $date->format(DateTime::RFC3339);
  }

  // Create conditions to select only the documents which are modified
  // after the last synchronization, and the checked user is one of the owners
  // of the documents.
  $conditions = "modifiedDate > '{$sync_last}' and '{$user_info['email']}' in owners";

  $service = $handler->buildService($credentials);
  $files = $handler->getFiles($service, $conditions);

  if (count($files)) {
    // Save new documents.
    foreach ($files as $file) {
      if (!google_drive_sync_get_node_by_file_id($file->id)) {
        $node = new stdClass();
        $node->type = 'cloud_asset';
        $node->status = 0;
        $node->language = LANGUAGE_NONE;
        node_object_prepare($node);

        $node->uid = $credentials['uid'];
        $node->title = $file->title;
        $node->field_url[$node->language][0]['url'] = $file->alternateLink;
        $node->field_url[$node->language][0]['title'] = $file->alternateLink;
        $node->field_file_id[$node->language][0]['value'] = $file->id;

        node_save($node);
      }
    }
  }

  db_merge('google_data_sync')
    ->key(array('uid' => $credentials['uid']))
    ->fields(array('last_sync' => REQUEST_TIME))
    ->execute();
}

/**
 * Dummy version callback for the Google Client SDK.
 *
 * Unfortunately, there is no way to determine the version from the source code.
 */
function google_drive_sync_clientsdk_get_version() {
  return '1.0';
}

/**
 * Filters data from the user's googledrive property before saving.
 *
 * @param $data
 *   $user->googledrive
 *
 * @return array
 *   Filtered array.
 */
function _google_drive_sync_prepare_db_data($data) {
  $tabledata = drupal_get_schema('google_oauth');
  return array_intersect_key($data, $tabledata['fields']);
}

/**
 * Return all users' google credentials, whose have one.
 *
 * @param mixed $uid
 *  user id of an account.
 *
 * @return array
 *  An array of users' credentials indexed by user id.
 */
function google_drive_sync_get_users_credential($uid = NULL) {
  $credentials = array();

  $query = db_select('google_oauth', 'go')
    ->fields('go');

  if (isset($uid)) {
    $query->condition('uid', $uid);
  }

  $result = $query->execute();

  while ($row = $result->fetch()) {
    $credentials[$row->uid] = array(
      'uid' => $row->uid,
      'access_token' => $row->access_token,
      'token_type' => $row->token_type,
      'id_token' => $row->id_token,
      'refresh_token' => $row->refresh_token,
      'created' => $row->created,
      'expires_in' => $row->expires_in,
      'client_id' => variable_get('googledrive_client_id'),
      'client_secret' => variable_get('googledrive_client_secret'),
    );
  }

  return $credentials;
}

/**
 * Return the proper node based on the given file id.
 *
 * @param $file_id
 *   The google file id.
 * @return bool|mixed|null
 *   The proper node object, or a NULL.
 */
function google_drive_sync_get_node_by_file_id($file_id) {
  $query = db_select('node', 'n');
  $query->leftJoin('field_data_field_file_id', 'ffi', 'n.nid=ffi.entity_id');
  $query->fields('n', array('nid'));
  $query->condition('n.type', 'cloud_asset')
    ->condition('ffi.field_file_id_value', $file_id)
    ->range(0, 1);
  $result = $query->execute()->fetchAssoc();

  if ($result) {
    $node = node_load($result['nid']);
  }

  return isset($node) ? $node : NULL;
}

/**
 * Implements hook_preprocess_hook().
 *
 * Changing the submitted by user name to the name of the google drive account.
 */
function google_drive_sync_preprocess_node(&$variables) {
  if ($variables['type'] == 'cloud_asset') {
    $author = user_load($variables['uid']);

    $handler = new GoogleDriveServiceHandler(
      variable_get('googledrive_client_id'),
      variable_get('googledrive_client_secret'),
      variable_get('googledrive_redirect_uri')
    );

    $credentials = google_drive_sync_get_users_credential($author->uid);

    if ($credentials) {
      $credentials = reset($credentials);
      $user_info = google_drive_sync_get_userinfo($handler, $credentials);

      $author->name = $user_info['name'];
      $name = theme('username', array('account' => $author));

      $variables['submitted'] = t('Submitted by !username on !datetime',
        array('!username' => $name, '!datetime' => $variables['date']));
    }
  }
}

/**
 * Return The Google account user's information.
 *
 * @param $credentials
 * @return array
 */
function google_drive_sync_get_userinfo($handler, $credentials) {
  $users_info = &drupal_static(__FUNCTION__);

  if ($users_info && isset($users_info[$credentials['uid']])) {
    $user_info = $users_info[$credentials['uid']];
  }
  else {
    // Get user info from cache, if it is available, or send a request to google.
    $cache = cache_get("googledrive:userinfo:{$credentials['uid']}");

    if (!$cache) {
      $user_info = $handler->GetUserInfo($credentials);
      cache_set("googledrive:userinfo:{$credentials['uid']}", $user_info, 'cache', time() + $credentials['expires_in']);
    }
    else {
      $user_info = $cache->data;
    }
    $users_info[$credentials['uid']] = $user_info;
  }

  return $user_info;
}

/**
 * Return The Google account user's information.
 *
 * @param $credentials
 * @return object
 *    Google file object.
 */
function google_drive_sync_get_file($credentials, $file_id) {
  $files = &drupal_static(__FUNCTION__);

  if (isset($files[$file_id])) {
    $file = $files[$file_id];
  }
  else {
    // Get user info from cache, if it is available, or send a request to google.
    $cache = cache_get("goggledrive:file:{$file_id}");

    if (!$cache) {
      $handler = new GoogleDriveServiceHandler(
        variable_get('googledrive_client_id'),
        variable_get('googledrive_client_secret'),
        variable_get('googledrive_redirect_uri')
      );

      $service = $handler->buildService($credentials);
      $file = $handler->getFile($service, $file_id);

      cache_set("googledrive:files:{$file_id}", $file, 'cache', CACHE_TEMPORARY);
    }
    else {
      $file = $cache->data;
    }

    $files[$file_id] = $file;
  }

  return $file;
}

/**
 * Get the date of the last sync time.
 *
 * @param $uid
 * @return null
 */
function google_drive_sync_get_last_sync($uid) {
  $result = db_select('google_data_sync', 'gds')
    ->fields('gds', array('last_sync'))
    ->condition('uid', $uid)
    ->execute()->fetchAssoc();

  return isset($result['last_sync']) ? $result['last_sync'] : NULL;
}

/**
 * Return the render array of the authentication link.
 */
function google_drive_sync_get_authentication_link($text = NULL) {
  $text = isset($text) ? $text : t('Connect with Google Drive');

  return l($text, 'https://accounts.google.com/o/oauth2/auth', array(
    'query' => array(
      'response_type' => 'code',
      'client_id' => variable_get('googledrive_client_id'),
      'redirect_uri' => variable_get('googledrive_redirect_uri'),
      'scope' => implode(' ', array(
        'https://www.googleapis.com/auth/drive',
        'https://www.googleapis.com/auth/drive.file',
        'https://www.googleapis.com/auth/userinfo.email',
        'https://www.googleapis.com/auth/userinfo.profile',
      )),
      'access_type' => 'offline',
      'approval_prompt' => 'force',
    ),
  ));
}
